# -*- coding: utf-8 -*-
import os
import sys
# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
import pyautogui
import threading
import keyboard
from PyQt5.QtGui import QIcon
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont, QFontDatabase
from PyQt5.QtWidgets import QMenuBar, QMenu, QAction, QWidget, QVBoxLayout, QMainWindow

RUNNING = False

class Ui_BloonsFarm(object):

    def setupUi(self, BloonsFarm):
        BloonsFarm.setObjectName("BloonsFarm")
        BloonsFarm.resize(800, 600)
        BloonsFarm.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(BloonsFarm)
        self.centralwidget.setObjectName("centralwidget")
        self.def_window = AnotherWindow()
        self.def_window.setObjectName("Deflation")
        self.def_window.setWindowTitle("Deflation")
        self.def_window.resize(400, 300)
        self.def_window.hide()
        font_id = QFontDatabase.addApplicationFont(self.resource_path("LuckiestGuy-Regular.ttf"))
        font = QFont(QFontDatabase.applicationFontFamilies(font_id)[0])
        font.setPointSize(18)
        self.def_window.sniper_pos.setGeometry(QtCore.QRect(100, 100, 250, 10))
        self.def_window.sniper_pos.setText("")
        self.def2x_window = AnotherWindow()
        self.def2x_window.setObjectName("Deflation 2x Cash")
        self.def2x_window.setWindowTitle("Deflation 2x Cash")
        self.def2x_window.resize(400, 300)
        self.def2x_window.hide()
        self.menu_bar = QMenuBar()
        self.edit_menu = QMenu('Edit')
        self.menu_bar.addMenu(self.edit_menu)
        self.deflation_coords = QAction('Deflation')
        self.edit_menu.addAction(self.deflation_coords)
        self.deflation2x_coords = QAction('Deflation 2x Cash')
        self.edit_menu.addAction(self.deflation2x_coords)
        self.deflation_coords.triggered.connect(self.def_window.show)
        self.deflation2x_coords.triggered.connect(self.def2x_window.show)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: (self.defbuttonpush()))
        self.pushButton.setGeometry(QtCore.QRect(50, 230, 331, 171))
        font_id = QFontDatabase.addApplicationFont(self.resource_path("LuckiestGuy-Regular.ttf"))
        font = QFont(QFontDatabase.applicationFontFamilies(font_id)[0])
        font.setPointSize(18)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: (self.def2xbuttonpush()))
        self.pushButton_2.setGeometry(QtCore.QRect(420, 230, 321, 171))
        font_id = QFontDatabase.addApplicationFont(self.resource_path("LuckiestGuy-Regular.ttf"))
        font = QFont(QFontDatabase.applicationFontFamilies(font_id)[0])
        font.setPointSize(16)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: (self.backbuttonpush()))
        self.pushButton_3.setGeometry(QtCore.QRect(250, 330, 331, 171))
        self.pushButton_3.hide()
        font_id = QFontDatabase.addApplicationFont(self.resource_path("LuckiestGuy-Regular.ttf"))
        font = QFont(QFontDatabase.applicationFontFamilies(font_id)[0])
        font.setPointSize(16)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 90, 721, 101))
        font_id = QFontDatabase.addApplicationFont(self.resource_path("LuckiestGuy-Regular.ttf"))
        font = QFont(QFontDatabase.applicationFontFamilies(font_id)[0])
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        BloonsFarm.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(BloonsFarm)
        self.statusbar.setObjectName("statusbar")
        BloonsFarm.setStatusBar(self.statusbar)
        self.thread = None

        self.retranslateUi(BloonsFarm)
        QtCore.QMetaObject.connectSlotsByName(BloonsFarm)

    def retranslateUi(self, BloonsFarm):
        _translate = QtCore.QCoreApplication.translate
        BloonsFarm.setWindowTitle(_translate("BloonsFarm", "BloonsFarm"))
        BloonsFarm.setWindowIcon(QIcon(self.resource_path("Null.ico")))
        BloonsFarm.setMenuBar(self.menu_bar)
        self.pushButton.setText(_translate("BloonsFarm", "Deflation"))
        self.pushButton_2.setText(_translate("BloonsFarm", "Deflation (2x Cash)"))
        self.pushButton_3.setText(_translate("BloonsFarm", "Back to Main Menu"))
        self.label.setText(_translate("BloonsFarm", "Select the desired farming method"))

    def resource_path(self, relative_path):
        try:
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")

        return os.path.join(base_path, relative_path)

    def defbuttonpush(self):
        global RUNNING
        RUNNING = True
        self.pushButton.hide()
        self.pushButton_2.hide()
        self.pushButton_3.show()
        self.thread = threading.Thread(target=self.deflation, daemon=True)
        self.thread.start()

    def def2xbuttonpush(self):
        global RUNNING
        RUNNING = True
        self.pushButton.hide()
        self.pushButton_2.hide()
        self.pushButton_3.show()
        self.thread = threading.Thread(target=self.deflation2x, daemon=True)
        self.thread.start()

    def backbuttonpush(self):
        global RUNNING
        RUNNING = False
        self.pushButton.show()
        self.pushButton_2.show()
        self.pushButton_3.hide()
        self.thread.join()


    def deflation(self):
        global RUNNING
        width, height = pyautogui.size()
        x_fact = width / 1920
        y_fact = height / 1080
        towerx_fact = x_fact
        towery_fact = y_fact

        check = abs(y_fact / x_fact)
        if check > 1.3 or check < 0.74:
            towerx_fact = x_fact * 1.1578125
            towery_fact = y_fact / 1.10925925925


        while RUNNING:
            counter1 = 0
            while counter1 < 5:
                if not RUNNING:
                    print("We're not running anymore, exit!")
                    return
                else:
                    print(f"We're still running, keep sleeping... {counter1 + 1}/5")
                    time.sleep(1)
                    counter1 += 1
            pyautogui.click(x_fact * 837, y_fact * 933)
            time.sleep(0.5)
            pyautogui.click(x_fact * 1332, y_fact * 967)
            time.sleep(0.5)
            pyautogui.click(x_fact * 516, y_fact * 578)
            time.sleep(0.5)
            pyautogui.click(x_fact * 656, y_fact * 396)
            time.sleep(0.5)
            pyautogui.click(x_fact * 1253, y_fact * 446)
            time.sleep(10)
            pyautogui.click(x_fact * 954, y_fact * 750)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 824, towery_fact * 366)
            time.sleep(0.25)
            keyboard.press_and_release('d')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 824, towery_fact * 366)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 824, towery_fact * 366)
            for i in range(4):
                time.sleep(0.25)
                keyboard.press_and_release(',')
            for i in range(2):
                time.sleep(0.25)
                keyboard.press_and_release('/')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 831, towery_fact * 307)
            time.sleep(0.25)
            keyboard.press_and_release('f')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 831, towery_fact * 307)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 831, towery_fact * 307)
            for i in range(4):
                time.sleep(0.25)
                keyboard.press_and_release(',')
            for i in range(2):
                time.sleep(0.25)
                keyboard.press_and_release('.')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 834, towery_fact * 764)
            time.sleep(0.25)
            keyboard.press_and_release('f')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 834, towery_fact * 764)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 834, towery_fact * 764)
            for i in range(4):
                time.sleep(0.25)
                keyboard.press_and_release(',')
            for i in range(2):
                time.sleep(0.25)
                keyboard.press_and_release('.')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 835, towery_fact * 696)
            time.sleep(0.25)
            keyboard.press_and_release('d')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 835, towery_fact * 696)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 835, towery_fact * 696)
            for i in range(4):
                time.sleep(0.25)
                keyboard.press_and_release(',')
            for i in range(2):
                time.sleep(0.25)
                keyboard.press_and_release('/')
            time.sleep(0.25)
            keyboard.press_and_release('space')
            time.sleep(0.25)
            keyboard.press_and_release('space')
            pyautogui.click(x_fact * 693, y_fact * 851)
            counter2 = 0
            while counter2 < 330:
                if not RUNNING:
                    print("We're not running anymore, exit!")
                    return
                else:
                    print(f"We're still running, keep sleeping... {counter2 + 1}/330")
                    time.sleep(1)
                    counter2 += 1
            pyautogui.click(x_fact * 956, y_fact * 904)
            time.sleep(0.5)
            pyautogui.click(x_fact * 693, y_fact * 851)
            print("Done with the loop!")

    def deflation2x(self):
        global RUNNING
        width, height = pyautogui.size()
        x_fact = width / 1920
        y_fact = height / 1080
        towerx_fact = x_fact
        towery_fact = y_fact

        check = abs(y_fact / x_fact)
        if check > 1.3 or check < 0.74:
            towerx_fact = x_fact * 1.1578125
            towery_fact = y_fact / 1.10925925925

        while RUNNING:
            counter1 = 0
            while counter1 < 5:
                if not RUNNING:
                    print("We're not running anymore, exit!")
                    return
                else:
                    print(f"We're still running, keep sleeping... {counter1 + 1}/5")
                    time.sleep(1)
                    counter1 += 1
            pyautogui.click(x_fact * 837, y_fact * 933)
            time.sleep(0.5)
            pyautogui.click(x_fact * 1332, y_fact * 967)
            time.sleep(0.5)
            pyautogui.click(x_fact * 516, y_fact * 578)
            time.sleep(0.5)
            pyautogui.click(x_fact * 656, y_fact * 396)
            time.sleep(0.5)
            pyautogui.click(x_fact * 1253, y_fact * 446)
            time.sleep(10)
            pyautogui.click(x_fact * 954, y_fact * 750)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1608, towery_fact * 501)
            time.sleep(0.25)
            keyboard.press_and_release('z')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1608, towery_fact * 501)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1608, towery_fact * 501)
            for i in range(2):
                time.sleep(0.25)
                keyboard.press_and_release(',')
            for i in range(5):
                time.sleep(0.25)
                keyboard.press_and_release('/')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1551, towery_fact * 544)
            time.sleep(0.25)
            keyboard.press_and_release('f')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1551, towery_fact * 544)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1551, towery_fact * 544)
            for i in range(4):
                time.sleep(0.25)
                keyboard.press_and_release(',')
            for i in range(2):
                time.sleep(0.25)
                keyboard.press_and_release('.')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1581, towery_fact * 622)
            time.sleep(0.25)
            keyboard.press_and_release('k')
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1581, towery_fact * 622)
            time.sleep(0.25)
            pyautogui.click(towerx_fact * 1581, towery_fact * 622)
            for i in range(2):
                time.sleep(0.25)
                keyboard.press_and_release(',')
            for i in range(3):
                time.sleep(0.25)
                keyboard.press_and_release('.')
            time.sleep(0.25)
            keyboard.press_and_release('space')
            time.sleep(0.25)
            keyboard.press_and_release('space')
            pyautogui.click(x_fact * 693, y_fact * 851)
            counter2 = 0
            while counter2 < 303:
                if not RUNNING:
                    print("We're not running anymore, exit!")
                    return
                else:
                    print(f"We're still running, keep sleeping... {counter2 + 1}/303")
                    time.sleep(1)
                    counter2 += 1
            pyautogui.click(x_fact * 956, y_fact * 904)
            time.sleep(0.5)
            pyautogui.click(x_fact * 693, y_fact * 851)

class AnotherWindow(QWidget):
    def __init__(self):
        super().__init__()
        layout = QVBoxLayout()
        self.def_window = QMainWindow()
        layout.addWidget(self.def_window)
        self.setLayout(layout)
        self.sniper_pos = QtWidgets.QTextEdit()
        layout.addWidget(self.sniper_pos)